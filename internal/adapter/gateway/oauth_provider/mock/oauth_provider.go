// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/adapter/igateway/oauth_provider.go

// Package mock_igateway is a generated GoMock package.
package mock_igateway

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOAuthProviderI is a mock of OAuthProviderI interface.
type MockOAuthProviderI struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderIMockRecorder
}

// MockOAuthProviderIMockRecorder is the mock recorder for MockOAuthProviderI.
type MockOAuthProviderIMockRecorder struct {
	mock *MockOAuthProviderI
}

// NewMockOAuthProviderI creates a new mock instance.
func NewMockOAuthProviderI(ctrl *gomock.Controller) *MockOAuthProviderI {
	mock := &MockOAuthProviderI{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProviderI) EXPECT() *MockOAuthProviderIMockRecorder {
	return m.recorder
}

// GetUserID mocks base method.
func (m *MockOAuthProviderI) GetUserID(ctx context.Context, accessToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, accessToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockOAuthProviderIMockRecorder) GetUserID(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockOAuthProviderI)(nil).GetUserID), ctx, accessToken)
}
