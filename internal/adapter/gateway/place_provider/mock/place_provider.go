// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/adapter/igateway/place_provider.go

// Package mock_igateway is a generated GoMock package.
package mock_igateway

import (
	context "context"
	reflect "reflect"

	place "github.com/d-kv/backend-travel-app/pkg/domain/model/place"
	category "github.com/d-kv/backend-travel-app/pkg/domain/model/place/category"
	util "github.com/d-kv/backend-travel-app/pkg/domain/model/util"
	gomock "github.com/golang/mock/gomock"
)

// MockPlaceProviderI is a mock of PlaceProviderI interface.
type MockPlaceProviderI struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceProviderIMockRecorder
}

// MockPlaceProviderIMockRecorder is the mock recorder for MockPlaceProviderI.
type MockPlaceProviderIMockRecorder struct {
	mock *MockPlaceProviderI
}

// NewMockPlaceProviderI creates a new mock instance.
func NewMockPlaceProviderI(ctrl *gomock.Controller) *MockPlaceProviderI {
	mock := &MockPlaceProviderI{ctrl: ctrl}
	mock.recorder = &MockPlaceProviderIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceProviderI) EXPECT() *MockPlaceProviderIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPlaceProviderI) Get(ctx context.Context, category category.Category, ll *util.LatLng, resultN, skipN uint32) ([]place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, category, ll, resultN, skipN)
	ret0, _ := ret[0].([]place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlaceProviderIMockRecorder) Get(ctx, category, ll, resultN, skipN interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaceProviderI)(nil).Get), ctx, category, ll, resultN, skipN)
}
