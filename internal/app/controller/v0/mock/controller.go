// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/app/icontroller/v0/controller.go

// Package mock_icontrollerv0 is a generated GoMock package.
package mock_icontrollerv0

import (
	context "context"
	reflect "reflect"

	place "github.com/d-kv/backend-travel-app/pkg/domain/model/place"
	user "github.com/d-kv/backend-travel-app/pkg/domain/model/user"
	util "github.com/d-kv/backend-travel-app/pkg/domain/model/util"
	gomock "github.com/golang/mock/gomock"
)

// MockControllerI is a mock of ControllerI interface.
type MockControllerI struct {
	ctrl     *gomock.Controller
	recorder *MockControllerIMockRecorder
}

// MockControllerIMockRecorder is the mock recorder for MockControllerI.
type MockControllerIMockRecorder struct {
	mock *MockControllerI
}

// NewMockControllerI creates a new mock instance.
func NewMockControllerI(ctrl *gomock.Controller) *MockControllerI {
	mock := &MockControllerI{ctrl: ctrl}
	mock.recorder = &MockControllerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerI) EXPECT() *MockControllerIMockRecorder {
	return m.recorder
}

// GetPlaces mocks base method.
func (m *MockControllerI) GetPlaces(ctx context.Context, ll *util.LatLng) ([]place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaces", ctx, ll)
	ret0, _ := ret[0].([]place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaces indicates an expected call of GetPlaces.
func (mr *MockControllerIMockRecorder) GetPlaces(ctx, ll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaces", reflect.TypeOf((*MockControllerI)(nil).GetPlaces), ctx, ll)
}

// GetUser mocks base method.
func (m *MockControllerI) GetUser(ctx context.Context, accessToken string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, accessToken)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockControllerIMockRecorder) GetUser(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockControllerI)(nil).GetUser), ctx, accessToken)
}
