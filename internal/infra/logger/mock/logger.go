// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infra/ilogger/logger.go

// Package mock_ilogger is a generated GoMock package.
package mock_ilogger

import (
	reflect "reflect"

	ilogger "github.com/d-kv/backend-travel-app/pkg/infra/ilogger"
	gomock "github.com/golang/mock/gomock"
)

// MockLoggerI is a mock of LoggerI interface.
type MockLoggerI struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerIMockRecorder
}

// MockLoggerIMockRecorder is the mock recorder for MockLoggerI.
type MockLoggerIMockRecorder struct {
	mock *MockLoggerI
}

// NewMockLoggerI creates a new mock instance.
func NewMockLoggerI(ctrl *gomock.Controller) *MockLoggerI {
	mock := &MockLoggerI{ctrl: ctrl}
	mock.recorder = &MockLoggerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerI) EXPECT() *MockLoggerIMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLoggerI) Debug(msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerIMockRecorder) Debug(msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLoggerI)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLoggerI) Error(msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerIMockRecorder) Error(msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLoggerI)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLoggerI) Info(msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerIMockRecorder) Info(msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLoggerI)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLoggerI) Warn(msg string, keyvals ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerIMockRecorder) Warn(msg interface{}, keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, keyvals...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLoggerI)(nil).Warn), varargs...)
}

// With mocks base method.
func (m *MockLoggerI) With(keyvals ...interface{}) ilogger.LoggerI {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range keyvals {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(ilogger.LoggerI)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerIMockRecorder) With(keyvals ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLoggerI)(nil).With), keyvals...)
}
