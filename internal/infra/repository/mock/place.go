// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infra/irepository/place.go

// Package mock_irepository is a generated GoMock package.
package mock_irepository

import (
	context "context"
	reflect "reflect"

	place "github.com/d-kv/backend-travel-app/pkg/domain/model/place"
	category "github.com/d-kv/backend-travel-app/pkg/domain/model/place/category"
	query "github.com/d-kv/backend-travel-app/pkg/domain/model/query"
	gomock "github.com/golang/mock/gomock"
)

// MockPlaceI is a mock of PlaceI interface.
type MockPlaceI struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceIMockRecorder
}

// MockPlaceIMockRecorder is the mock recorder for MockPlaceI.
type MockPlaceIMockRecorder struct {
	mock *MockPlaceI
}

// NewMockPlaceI creates a new mock instance.
func NewMockPlaceI(ctrl *gomock.Controller) *MockPlaceI {
	mock := &MockPlaceI{ctrl: ctrl}
	mock.recorder = &MockPlaceIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceI) EXPECT() *MockPlaceIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlaceI) Create(ctx context.Context, place *place.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, place)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPlaceIMockRecorder) Create(ctx, place interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceI)(nil).Create), ctx, place)
}

// Delete mocks base method.
func (m *MockPlaceI) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceIMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceI)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPlaceI) Get(ctx context.Context, id string) (*place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlaceIMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaceI)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPlaceI) GetAll(ctx context.Context) ([]place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPlaceIMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPlaceI)(nil).GetAll), ctx)
}

// GetByCategory mocks base method.
func (m *MockPlaceI) GetByCategory(ctx context.Context, category category.Category) ([]place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCategory", ctx, category)
	ret0, _ := ret[0].([]place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCategory indicates an expected call of GetByCategory.
func (mr *MockPlaceIMockRecorder) GetByCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCategory", reflect.TypeOf((*MockPlaceI)(nil).GetByCategory), ctx, category)
}

// GetNearby mocks base method.
func (m *MockPlaceI) GetNearby(ctx context.Context, getQuery query.Geo) ([]place.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearby", ctx, getQuery)
	ret0, _ := ret[0].([]place.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNearby indicates an expected call of GetNearby.
func (mr *MockPlaceIMockRecorder) GetNearby(ctx, getQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearby", reflect.TypeOf((*MockPlaceI)(nil).GetNearby), ctx, getQuery)
}
