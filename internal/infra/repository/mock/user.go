// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/infra/irepository/user.go

// Package mock_irepository is a generated GoMock package.
package mock_irepository

import (
	context "context"
	reflect "reflect"

	user "github.com/d-kv/backend-travel-app/pkg/domain/model/user"
	gomock "github.com/golang/mock/gomock"
)

// MockUserI is a mock of UserI interface.
type MockUserI struct {
	ctrl     *gomock.Controller
	recorder *MockUserIMockRecorder
}

// MockUserIMockRecorder is the mock recorder for MockUserI.
type MockUserIMockRecorder struct {
	mock *MockUserI
}

// NewMockUserI creates a new mock instance.
func NewMockUserI(ctrl *gomock.Controller) *MockUserI {
	mock := &MockUserI{ctrl: ctrl}
	mock.recorder = &MockUserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserI) EXPECT() *MockUserIMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserI) Create(ctx context.Context, user *user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserIMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserI)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockUserI) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserIMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserI)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockUserI) Get(ctx context.Context, id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserIMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserI)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockUserI) GetAll(ctx context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserIMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserI)(nil).GetAll), ctx)
}

// GetByOAuthAToken mocks base method.
func (m *MockUserI) GetByOAuthAToken(ctx context.Context, accessToken string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOAuthAToken", ctx, accessToken)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOAuthAToken indicates an expected call of GetByOAuthAToken.
func (mr *MockUserIMockRecorder) GetByOAuthAToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOAuthAToken", reflect.TypeOf((*MockUserI)(nil).GetByOAuthAToken), ctx, accessToken)
}

// GetByOAuthID mocks base method.
func (m *MockUserI) GetByOAuthID(ctx context.Context, id string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOAuthID", ctx, id)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOAuthID indicates an expected call of GetByOAuthID.
func (mr *MockUserIMockRecorder) GetByOAuthID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOAuthID", reflect.TypeOf((*MockUserI)(nil).GetByOAuthID), ctx, id)
}
