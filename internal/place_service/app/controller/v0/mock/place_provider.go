// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/d-kv/backend-travel-app/pkg/place_service/domain/model"

	util "github.com/d-kv/backend-travel-app/pkg/place_service/domain/model/util"
)

// PlaceProvider is an autogenerated mock type for the PlaceProvider type
type PlaceProvider struct {
	mock.Mock
}

// PlacesByDistance provides a mock function with given fields: ctx, geoQ, skipN, resN
func (_m *PlaceProvider) PlacesByDistance(ctx context.Context, geoQ *util.GeoQuery, skipN int64, resN int64) ([]model.Place, error) {
	ret := _m.Called(ctx, geoQ, skipN, resN)

	var r0 []model.Place
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *util.GeoQuery, int64, int64) ([]model.Place, error)); ok {
		return rf(ctx, geoQ, skipN, resN)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *util.GeoQuery, int64, int64) []model.Place); ok {
		r0 = rf(ctx, geoQ, skipN, resN)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Place)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *util.GeoQuery, int64, int64) error); ok {
		r1 = rf(ctx, geoQ, skipN, resN)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPlaceProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlaceProvider creates a new instance of PlaceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlaceProvider(t mockConstructorTestingTNewPlaceProvider) *PlaceProvider {
	mock := &PlaceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
