// Code generated by mockery. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenCache is an autogenerated mock type for the TokenCache type
type TokenCache struct {
	mock.Mock
}

// SetUserID provides a mock function with given fields: ctx, refreshToken, userUUID
func (_m *TokenCache) SetUserID(ctx context.Context, refreshToken string, userUUID string) error {
	ret := _m.Called(ctx, refreshToken, userUUID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, refreshToken, userUUID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserID provides a mock function with given fields: ctx, refreshToken
func (_m *TokenCache) UserID(ctx context.Context, refreshToken string) (string, error) {
	ret := _m.Called(ctx, refreshToken)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenCache creates a new instance of TokenCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenCache(t mockConstructorTestingTNewTokenCache) *TokenCache {
	mock := &TokenCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
